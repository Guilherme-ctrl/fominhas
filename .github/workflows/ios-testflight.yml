name: 🚀 iOS TestFlight Distribution

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.24.0'
  XCODE_VERSION: '15.0'

jobs:
  version-bump:
    name: 📈 Bump Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 📈 Bump Version
        id: version
        run: |
          # Extrair versão atual do pubspec.yaml
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
          CURRENT_BUILD=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/.*+//')
          
          echo "Current version: $CURRENT_VERSION"
          echo "Current build: $CURRENT_BUILD"
          
          # Determinar tipo de incremento
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          
          # Separar versão em componentes
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Incrementar versão baseado no tipo
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          # Incrementar build number
          NEW_BUILD=$((CURRENT_BUILD + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "New build: $NEW_BUILD"
          
          # Atualizar pubspec.yaml
          sed -i "s/^version:.*/version: $NEW_VERSION+$NEW_BUILD/" pubspec.yaml
          
          # Configurar Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit e tag
          git add pubspec.yaml
          git commit -m "🔖 Bump version to $NEW_VERSION+$NEW_BUILD"
          git tag "v$NEW_VERSION+$NEW_BUILD"
          git push origin HEAD --tags
          
          # Definir outputs
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "build-number=$NEW_BUILD" >> $GITHUB_OUTPUT

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    needs: version-bump
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🧪 Run Tests
        run: flutter test

      - name: 📊 Run Analysis
        run: flutter analyze

  build-ios:
    name: 🏗️ Build iOS
    runs-on: macos-14
    needs: [version-bump, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: 📱 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🧹 Clean Build
        run: flutter clean

      - name: 🏗️ Build iOS Release
        run: |
          flutter build ios --release --no-codesign
          
      - name: 📁 Archive Workspace
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive

      - name: 📤 Export IPA
        env:
          EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PLIST }}
        run: |
          # Criar arquivo de configuração de exportação
          echo "$EXPORT_PLIST" > ios/export_options.plist
          
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist export_options.plist \
            -exportPath build/

      - name: 🚀 Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # Instalar xcodes se necessário
          if ! command -v xcrun altool &> /dev/null; then
            echo "Installing command line tools..."
          fi
          
          # Upload para TestFlight
          xcrun altool --upload-app \
            --type ios \
            --file ios/build/Runner.ipa \
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \
            --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID
            
      - name: 📋 Create Release Notes
        run: |
          VERSION="${{ needs.version-bump.outputs.version }}"
          BUILD_NUMBER="${{ needs.version-bump.outputs.build-number }}"
          
          cat > release_notes.md << EOF
          # 🎉 Fominhas v$VERSION Build $BUILD_NUMBER
          
          ## 📱 TestFlight Distribution
          
          Esta versão foi automaticamente enviada para o TestFlight.
          
          ### 🔄 Mudanças Incluídas:
          - Cores neutras para times
          - Melhorias na interface de torneios
          - Correções de bugs
          
          ### 📊 Informações da Build:
          - **Versão**: $VERSION
          - **Build**: $BUILD_NUMBER
          - **Flutter**: ${{ env.FLUTTER_VERSION }}
          - **Xcode**: ${{ env.XCODE_VERSION }}
          - **Commit**: ${{ github.sha }}
          
          ---
          🤖 Automaticamente gerado pelo GitHub Actions
          EOF

      - name: 📢 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version-bump.outputs.version }}+${{ needs.version-bump.outputs.build-number }}
          name: "🚀 Fominhas v${{ needs.version-bump.outputs.version }} Build ${{ needs.version-bump.outputs.build-number }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: 📱 Notify Success
    runs-on: ubuntu-latest
    needs: [version-bump, build-ios]
    if: success()
    steps:
      - name: 🎉 Success Notification
        run: |
          echo "🎉 Successfully deployed Fominhas v${{ needs.version-bump.outputs.version }} to TestFlight!"
          echo "📱 Version: ${{ needs.version-bump.outputs.version }}"
          echo "🔢 Build: ${{ needs.version-bump.outputs.build-number }}"
          echo "✅ Check TestFlight for the new build."